/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var should = require('should');
var util = require('util');
var _ = require('underscore');

var CLITest = require('../../../framework/arm-cli-test');
var utils = require('../../../../lib/util/utils');
var tagUtils = require('../../../../lib/commands/arm/tag/tagUtils');
var testUtils = require('../../../util/util');

var networkTestUtil = new (require('../../../util/networkTestUtil'))();

var generatorUtils = require('../../../../lib/util/generatorUtils');
var profile = require('../../../../lib/util/profile');
var $ = utils.getLocaleString;

var testPrefix = 'arm-network-vnet-subnet-tests',
  groupName = 'xplat-test-subnet',
  location;
var index = 0;

var subnets = {
  addressPrefix: '10.0.0.0/16',
  addressPrefixNew: '10.0.0.0/24',
  name: 'subnetName'
};

subnets.virtualNetworkName = 'virtualNetworkName';
subnets.networkSecurityGroupName = 'networkSecurityGroupName';
subnets.routeTableName = 'routeTableName';

var virtualNetwork = {
  location: 'westus'
};
var networkSecurityGroup = {
  location: 'westus'
};
var routeTable = {
  location: 'westus'
};
var invalidPrefixes = {
  addressPrefix: 'InvalidPrefixes',
  virtualNetworkName: 'virtualNetworkName',
  networkSecurityGroupName: 'networkSecurityGroupName',
  routeTableName: 'routeTableName',
  name: 'invalidPrefixesName',
  group: groupName
};
var prefixesOutOfRange = {
  addressPrefix: '11.0.0.0/8',
  virtualNetworkName: 'virtualNetworkName',
  networkSecurityGroupName: 'networkSecurityGroupName',
  routeTableName: 'routeTableName',
  name: 'prefixesOutOfRangeName',
  group: groupName
};
var createSubnetWithoutNsgAndRouteTable = {
  addressPrefix: '10.0.0.0/16',
  virtualNetworkName: 'virtualNetworkName',
  name: 'createSubnetWithoutNsgAndRouteTableName',
  group: groupName
};
var createSubnetUsingId = {
  addressPrefix: '10.0.0.0/16',
  virtualNetworkName: 'virtualNetworkName',
  networkSecurityGroupName: 'networkSecurityGroupName',
  routeTableName: 'routeTableName',
  name: 'createSubnetUsingIdName',
  group: groupName
};
var removeNsgAndRouteTableFromSubnet = {
  addressPrefix: '10.0.0.0/16',
  virtualNetworkName: 'virtualNetworkName',
  networkSecurityGroupName: 'networkSecurityGroupName',
  routeTableName: 'routeTableName',
  name: 'removeNsgAndRouteTableFromSubnetName',
  group: groupName
};

var requiredEnvironment = [{
  name: 'AZURE_VM_TEST_LOCATION',
  defaultValue: 'westus'
}];

describe('arm', function () {
  describe('network', function () {
    var suite, retry = 5;
    var hour = 60 * 60000;

    before(function (done) {
      this.timeout(hour);
      suite = new CLITest(this, testPrefix, requiredEnvironment);
      suite.setupSuite(function () {
        location = subnets.location || process.env.AZURE_VM_TEST_LOCATION;
        groupName = suite.isMocked ? groupName : suite.generateId(groupName, null);
        subnets.location = location;
        subnets.group = groupName;
        subnets.name = suite.isMocked ? subnets.name : suite.generateId(subnets.name, null);
        if (!suite.isPlayback()) {
          networkTestUtil.createGroup(groupName, location, suite, function () {
            var cmd = 'network vnet create -g {1} -n virtualNetworkName --location {location} --json'.formatArgs(virtualNetwork, groupName);
            testUtils.executeCommand(suite, retry, cmd, function (result) {
              result.exitStatus.should.equal(0);
              var output = JSON.parse(result.text);
              invalidPrefixes.virtualNetworkId = suite.isMocked ? output.id : suite.generateId(invalidPrefixes.virtualNetworkId, null);
              prefixesOutOfRange.virtualNetworkId = suite.isMocked ? output.id : suite.generateId(prefixesOutOfRange.virtualNetworkId, null);
              createSubnetWithoutNsgAndRouteTable.virtualNetworkId = suite.isMocked ? output.id : suite.generateId(createSubnetWithoutNsgAndRouteTable.virtualNetworkId, null);
              createSubnetUsingId.virtualNetworkId = suite.isMocked ? output.id : suite.generateId(createSubnetUsingId.virtualNetworkId, null);
              removeNsgAndRouteTableFromSubnet.virtualNetworkId = suite.isMocked ? output.id : suite.generateId(removeNsgAndRouteTableFromSubnet.virtualNetworkId, null);
              var cmd = 'network nsg create -g {1} -n networkSecurityGroupName --location {location} --json'.formatArgs(networkSecurityGroup, groupName);
              testUtils.executeCommand(suite, retry, cmd, function (result) {
                result.exitStatus.should.equal(0);
                var output = JSON.parse(result.text);
                invalidPrefixes.networkSecurityGroupId = suite.isMocked ? output.id : suite.generateId(invalidPrefixes.networkSecurityGroupId, null);
                prefixesOutOfRange.networkSecurityGroupId = suite.isMocked ? output.id : suite.generateId(prefixesOutOfRange.networkSecurityGroupId, null);
                createSubnetWithoutNsgAndRouteTable.networkSecurityGroupId = suite.isMocked ? output.id : suite.generateId(createSubnetWithoutNsgAndRouteTable.networkSecurityGroupId, null);
                createSubnetUsingId.networkSecurityGroupId = suite.isMocked ? output.id : suite.generateId(createSubnetUsingId.networkSecurityGroupId, null);
                removeNsgAndRouteTableFromSubnet.networkSecurityGroupId = suite.isMocked ? output.id : suite.generateId(removeNsgAndRouteTableFromSubnet.networkSecurityGroupId, null);
                var cmd = 'network route-table create -g {1} -n routeTableName --location {location} --json'.formatArgs(routeTable, groupName);
                testUtils.executeCommand(suite, retry, cmd, function (result) {
                  result.exitStatus.should.equal(0);
                  var output = JSON.parse(result.text);
                  invalidPrefixes.routeTableId = suite.isMocked ? output.id : suite.generateId(invalidPrefixes.routeTableId, null);
                  prefixesOutOfRange.routeTableId = suite.isMocked ? output.id : suite.generateId(prefixesOutOfRange.routeTableId, null);
                  createSubnetWithoutNsgAndRouteTable.routeTableId = suite.isMocked ? output.id : suite.generateId(createSubnetWithoutNsgAndRouteTable.routeTableId, null);
                  createSubnetUsingId.routeTableId = suite.isMocked ? output.id : suite.generateId(createSubnetUsingId.routeTableId, null);
                  removeNsgAndRouteTableFromSubnet.routeTableId = suite.isMocked ? output.id : suite.generateId(removeNsgAndRouteTableFromSubnet.routeTableId, null);
                  done();
                });
              });
            });
          });
        } else {
          var subscriptionId = profile.current.getSubscription().id;
          invalidPrefixes.virtualNetworkId = suite.isMocked ? generatorUtils.generateResourceIdCommon(subscriptionId, groupName, 'virtualNetworks', invalidPrefixes.virtualNetworkName) : suite.generateId(invalidPrefixes.virtualNetworkId, null)
          invalidPrefixes.networkSecurityGroupId = suite.isMocked ? generatorUtils.generateResourceIdCommon(subscriptionId, groupName, 'networkSecurityGroups', invalidPrefixes.networkSecurityGroupName) : suite.generateId(invalidPrefixes.networkSecurityGroupId, null)
          invalidPrefixes.routeTableId = suite.isMocked ? generatorUtils.generateResourceIdCommon(subscriptionId, groupName, 'routeTables', invalidPrefixes.routeTableName) : suite.generateId(invalidPrefixes.routeTableId, null)
          prefixesOutOfRange.virtualNetworkId = suite.isMocked ? generatorUtils.generateResourceIdCommon(subscriptionId, groupName, 'virtualNetworks', prefixesOutOfRange.virtualNetworkName) : suite.generateId(prefixesOutOfRange.virtualNetworkId, null)
          prefixesOutOfRange.networkSecurityGroupId = suite.isMocked ? generatorUtils.generateResourceIdCommon(subscriptionId, groupName, 'networkSecurityGroups', prefixesOutOfRange.networkSecurityGroupName) : suite.generateId(prefixesOutOfRange.networkSecurityGroupId, null)
          prefixesOutOfRange.routeTableId = suite.isMocked ? generatorUtils.generateResourceIdCommon(subscriptionId, groupName, 'routeTables', prefixesOutOfRange.routeTableName) : suite.generateId(prefixesOutOfRange.routeTableId, null)
          createSubnetWithoutNsgAndRouteTable.virtualNetworkId = suite.isMocked ? generatorUtils.generateResourceIdCommon(subscriptionId, groupName, 'virtualNetworks', createSubnetWithoutNsgAndRouteTable.virtualNetworkName) : suite.generateId(createSubnetWithoutNsgAndRouteTable.virtualNetworkId, null)
          createSubnetUsingId.virtualNetworkId = suite.isMocked ? generatorUtils.generateResourceIdCommon(subscriptionId, groupName, 'virtualNetworks', createSubnetUsingId.virtualNetworkName) : suite.generateId(createSubnetUsingId.virtualNetworkId, null)
          createSubnetUsingId.networkSecurityGroupId = suite.isMocked ? generatorUtils.generateResourceIdCommon(subscriptionId, groupName, 'networkSecurityGroups', createSubnetUsingId.networkSecurityGroupName) : suite.generateId(createSubnetUsingId.networkSecurityGroupId, null)
          createSubnetUsingId.routeTableId = suite.isMocked ? generatorUtils.generateResourceIdCommon(subscriptionId, groupName, 'routeTables', createSubnetUsingId.routeTableName) : suite.generateId(createSubnetUsingId.routeTableId, null)
          removeNsgAndRouteTableFromSubnet.virtualNetworkId = suite.isMocked ? generatorUtils.generateResourceIdCommon(subscriptionId, groupName, 'virtualNetworks', removeNsgAndRouteTableFromSubnet.virtualNetworkName) : suite.generateId(removeNsgAndRouteTableFromSubnet.virtualNetworkId, null)
          removeNsgAndRouteTableFromSubnet.networkSecurityGroupId = suite.isMocked ? generatorUtils.generateResourceIdCommon(subscriptionId, groupName, 'networkSecurityGroups', removeNsgAndRouteTableFromSubnet.networkSecurityGroupName) : suite.generateId(removeNsgAndRouteTableFromSubnet.networkSecurityGroupId, null)
          removeNsgAndRouteTableFromSubnet.routeTableId = suite.isMocked ? generatorUtils.generateResourceIdCommon(subscriptionId, groupName, 'routeTables', removeNsgAndRouteTableFromSubnet.routeTableName) : suite.generateId(removeNsgAndRouteTableFromSubnet.routeTableId, null)
          done();
        }
      });
    });
    after(function (done) {
      this.timeout(hour);
      networkTestUtil.deleteGroup(groupName, suite, function () {
        suite.teardownSuite(done);
      });
    });
    beforeEach(function (done) {
      suite.setupTest(done);
    });
    afterEach(function (done) {
      suite.teardownTest(done);
    });

    describe('subnet', function () {
      this.timeout(hour);
      it('create should create subnet', function (done) {
        var cmd = 'network vnet subnet create -g {group} -n {name} --address-prefix {addressPrefix} --vnet-name {virtualNetworkName} --network-security-group-name {networkSecurityGroupName} --route-table-name {routeTableName} --json'.formatArgs(subnets);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          var output = JSON.parse(result.text);
          output.name.should.equal(subnets.name);
          output.addressPrefix.toLowerCase().should.equal(subnets.addressPrefix.toLowerCase());
          done();
        });
      });
      it('show should display subnet details', function (done) {
        var cmd = 'network vnet subnet show -g {group} -n {name} --vnet-name {virtualNetworkName} --json'.formatArgs(subnets);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          var output = JSON.parse(result.text);
          output.name.should.equal(subnets.name);
          output.addressPrefix.toLowerCase().should.equal(subnets.addressPrefix.toLowerCase());
          done();
        });
      });
      it('set should update subnet', function (done) {
        var cmd = 'network vnet subnet set -g {group} -n {name} --address-prefix {addressPrefixNew} --vnet-name {virtualNetworkName} --json'.formatArgs(subnets);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          var output = JSON.parse(result.text);
          output.name.should.equal(subnets.name);
          output.addressPrefix.toLowerCase().should.equal(subnets.addressPrefixNew.toLowerCase());
          done();
        });
      });
      it('list should display all subnet in resource group', function (done) {
        var cmd = 'network vnet subnet list -g {group} --vnet-name {virtualNetworkName} --json'.formatArgs(subnets);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          var outputs = JSON.parse(result.text);
          _.some(outputs, function (output) {
            return output.name === subnets.name;
          }).should.be.true;
          done();
        });
      });
      it('delete should delete subnet', function (done) {
        var cmd = 'network vnet subnet delete -g {group} -n {name} --quiet --vnet-name {virtualNetworkName} --json'.formatArgs(subnets);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);

          cmd = 'network vnet subnet show -g {group} -n {name} --vnet-name {virtualNetworkName} --json'.formatArgs(subnets);
          testUtils.executeCommand(suite, retry, cmd, function (result) {
            result.exitStatus.should.equal(0);
            var output = JSON.parse(result.text || '{}');
            output.should.be.empty;
            done();
          });
        });
      });
      it('create should fail for invalid prefixes', function (done) {
        var cmd = 'network vnet subnet create -g {group} -n {name} --address-prefix {addressPrefix} --vnet-name {virtualNetworkName} --network-security-group-name {networkSecurityGroupName} --route-table-name {routeTableName} --json'.formatArgs(invalidPrefixes);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.not.equal(0);
          done();
        });
      });
      it('create should fail for prefixes out of range', function (done) {
        var cmd = 'network vnet subnet create -g {group} -n {name} --address-prefix {addressPrefix} --vnet-name {virtualNetworkName} --network-security-group-name {networkSecurityGroupName} --route-table-name {routeTableName} --json'.formatArgs(prefixesOutOfRange);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.not.equal(0);
          done();
        });
      });
      it('create should pass for create subnet without nsg and route table', function (done) {
        var cmd = 'network vnet subnet create -g {group} -n {name} --address-prefix {addressPrefix} --vnet-name {virtualNetworkName} --json'.formatArgs(createSubnetWithoutNsgAndRouteTable);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          var output = JSON.parse(result.text);
          output.name.should.equal(createSubnetWithoutNsgAndRouteTable.name);
          output.addressPrefix.toLowerCase().should.equal(createSubnetWithoutNsgAndRouteTable.addressPrefix.toLowerCase());

          cmd = 'network vnet subnet delete -g {group} -n {name} --vnet-name {virtualNetworkName} --quiet --json'.formatArgs(createSubnetWithoutNsgAndRouteTable);
          testUtils.executeCommand(suite, retry, cmd, function (result) {
            result.exitStatus.should.equal(0);
            done();
          });
        });
      });
      it('create should pass for create subnet using id', function (done) {
        var cmd = 'network vnet subnet create -g {group} -n {name} --address-prefix {addressPrefix} --vnet-name {virtualNetworkName} --network-security-group-id {networkSecurityGroupId} --route-table-id {routeTableId} --json'.formatArgs(createSubnetUsingId);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          var output = JSON.parse(result.text);
          output.name.should.equal(createSubnetUsingId.name);
          output.addressPrefix.toLowerCase().should.equal(createSubnetUsingId.addressPrefix.toLowerCase());
          output.networkSecurityGroup.id.should.equal(createSubnetUsingId.networkSecurityGroupId);
          output.routeTable.id.should.equal(createSubnetUsingId.routeTableId);

          cmd = 'network vnet subnet delete -g {group} -n {name} --vnet-name {virtualNetworkName} --quiet --json'.formatArgs(createSubnetUsingId);
          testUtils.executeCommand(suite, retry, cmd, function (result) {
            result.exitStatus.should.equal(0);
            done();
          });
        });
      });
      it('create should pass for remove nsg and route table from subnet', function (done) {
        var cmd = 'network vnet subnet create -g {group} -n {name} --address-prefix {addressPrefix} --vnet-name {virtualNetworkName} --network-security-group-name {networkSecurityGroupName} --route-table-name {routeTableName} --json'.formatArgs(removeNsgAndRouteTableFromSubnet);
        testUtils.executeCommand(suite, retry, cmd, function (result) {
          result.exitStatus.should.equal(0);
          var output = JSON.parse(result.text);
          output.name.should.equal(removeNsgAndRouteTableFromSubnet.name);
          output.addressPrefix.toLowerCase().should.equal(removeNsgAndRouteTableFromSubnet.addressPrefix.toLowerCase());
          output.networkSecurityGroup.id.should.containEql(removeNsgAndRouteTableFromSubnet.networkSecurityGroupName);
          output.routeTable.id.should.containEql(removeNsgAndRouteTableFromSubnet.routeTableName);

          cmd = 'network vnet subnet set -g {group} -n {name} --vnet-name {virtualNetworkName} --network-security-group-name --route-table-name --json'.formatArgs(removeNsgAndRouteTableFromSubnet);
          testUtils.executeCommand(suite, retry, cmd, function (result) {
            result.exitStatus.should.equal(0);
            var output = JSON.parse(result.text);
            output.name.should.equal(removeNsgAndRouteTableFromSubnet.name);
            should.not.exist(output.networkSecurityGroup);
            should.not.exist(output.routeTable);

            cmd = 'network vnet subnet delete -g {group} -n {name} --vnet-name {virtualNetworkName} --quiet --json'.formatArgs(removeNsgAndRouteTableFromSubnet);
            testUtils.executeCommand(suite, retry, cmd, function (result) {
              result.exitStatus.should.equal(0);
              done();
            });
          });
        });
      });
    });
  });
});
